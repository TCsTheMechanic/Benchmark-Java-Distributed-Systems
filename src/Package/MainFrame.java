/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Package;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.rmi.AlreadyBoundException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.jgroups.JChannel;

/**
 *
 * @author Eduardo
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        model = ((DefaultTableModel) jTable1.getModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ButtonClienteTCP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TextFieldNumPack = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        ButtonStartServerUDP = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ButtonStopServerRMI = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        ButtonStopServerMulticast = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        ButtonStartServerMulticast = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ButtonStopServerJGroup = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        ButtonStartServerJGroup = new javax.swing.JButton();
        ButtonStartServerRMI = new javax.swing.JButton();
        ButtonStopServerTCP = new javax.swing.JButton();
        ButtonStartServerTCP = new javax.swing.JButton();
        ButtonStopServerUDP = new javax.swing.JButton();
        ButtonCLienteUDP = new javax.swing.JButton();
        ButtonClienteRMI = new javax.swing.JButton();
        ButtonClienteMulticast = new javax.swing.JButton();
        ButtonClienteJGroup = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaStatus = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Protocolo", "Mensagens Perdidas", "Mensagens Retransmitidas", "Tempo de Envio", "Mensagens Enviadas"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        ButtonClienteTCP.setText("TCP");
        ButtonClienteTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClienteTCPActionPerformed(evt);
            }
        });

        jLabel1.setText("Disparar Pacotes");

        jLabel2.setText("Benchmarck Sockets de Comunicação");

        jLabel3.setText("Numero de Pacotes");

        jLabel4.setText("Opções dos Servidores");

        ButtonStartServerUDP.setText("Start");
        ButtonStartServerUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartServerUDPActionPerformed(evt);
            }
        });

        jLabel5.setText("TCP");

        ButtonStopServerRMI.setText("Stop");
        ButtonStopServerRMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopServerRMIActionPerformed(evt);
            }
        });

        jLabel6.setText("UDP");

        ButtonStopServerMulticast.setText("Stop");
        ButtonStopServerMulticast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopServerMulticastActionPerformed(evt);
            }
        });

        jLabel7.setText("RMI");

        ButtonStartServerMulticast.setText("Start");
        ButtonStartServerMulticast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartServerMulticastActionPerformed(evt);
            }
        });

        jLabel8.setText("Multicast");

        ButtonStopServerJGroup.setText("Stop");
        ButtonStopServerJGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopServerJGroupActionPerformed(evt);
            }
        });

        jLabel9.setText("JGroup");

        ButtonStartServerJGroup.setText("Start");
        ButtonStartServerJGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartServerJGroupActionPerformed(evt);
            }
        });

        ButtonStartServerRMI.setText("Start");
        ButtonStartServerRMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartServerRMIActionPerformed(evt);
            }
        });

        ButtonStopServerTCP.setText("Stop");
        ButtonStopServerTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopServerTCPActionPerformed(evt);
            }
        });

        ButtonStartServerTCP.setText("Start");
        ButtonStartServerTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartServerTCPActionPerformed(evt);
            }
        });

        ButtonStopServerUDP.setText("Stop");
        ButtonStopServerUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopServerUDPActionPerformed(evt);
            }
        });

        ButtonCLienteUDP.setText("UDP");
        ButtonCLienteUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCLienteUDPActionPerformed(evt);
            }
        });

        ButtonClienteRMI.setText("RMI");
        ButtonClienteRMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClienteRMIActionPerformed(evt);
            }
        });

        ButtonClienteMulticast.setText("Multicast");
        ButtonClienteMulticast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClienteMulticastActionPerformed(evt);
            }
        });

        ButtonClienteJGroup.setText("JGroup");
        ButtonClienteJGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClienteJGroupActionPerformed(evt);
            }
        });

        TextAreaStatus.setColumns(20);
        TextAreaStatus.setRows(5);
        jScrollPane2.setViewportView(TextAreaStatus);

        jLabel10.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonClienteMulticast)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ButtonClienteJGroup))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ButtonClienteTCP)
                                .addGap(18, 18, 18)
                                .addComponent(ButtonCLienteUDP)
                                .addGap(18, 18, 18)
                                .addComponent(ButtonClienteRMI))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(44, 44, 44)
                                    .addComponent(jLabel1))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(TextFieldNumPack, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(212, 212, 212)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(378, 378, 378))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(214, 214, 214)
                                        .addComponent(jLabel4)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(164, 164, 164)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addGap(91, 91, 91))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel6)
                                                    .addGap(89, 89, 89)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel8)
                                                    .addComponent(jLabel9))
                                                .addGap(59, 59, 59)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(ButtonStartServerMulticast)
                                                .addGap(18, 18, 18)
                                                .addComponent(ButtonStopServerMulticast))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(ButtonStartServerJGroup)
                                                .addGap(18, 18, 18)
                                                .addComponent(ButtonStopServerJGroup))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(ButtonStartServerUDP, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(ButtonStartServerTCP, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(ButtonStopServerTCP)
                                                    .addComponent(ButtonStopServerUDP)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(89, 89, 89)
                                        .addComponent(ButtonStartServerRMI)
                                        .addGap(18, 18, 18)
                                        .addComponent(ButtonStopServerRMI)))
                                .addGap(212, 212, 212))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TextFieldNumPack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ButtonStartServerTCP)
                                .addComponent(ButtonStopServerTCP)
                                .addComponent(jLabel5))
                            .addComponent(jLabel1))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ButtonStartServerUDP)
                            .addComponent(ButtonStopServerUDP)
                            .addComponent(jLabel6)
                            .addComponent(ButtonClienteTCP)
                            .addComponent(ButtonCLienteUDP)
                            .addComponent(ButtonClienteRMI))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ButtonStartServerRMI)
                                    .addComponent(ButtonStopServerRMI)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ButtonStartServerMulticast)
                                    .addComponent(ButtonStopServerMulticast)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(ButtonStartServerJGroup)
                                    .addComponent(ButtonStopServerJGroup))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 11, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ButtonClienteMulticast)
                                    .addComponent(ButtonClienteJGroup))
                                .addGap(130, 130, 130))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    DefaultTableModel model;
    String inicio, fim;

    int tcpLost = 0, udpLost = 0, rmiLost = 0, multicastLost = 0, jgroupLost = 0;

    private void ButtonClienteTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClienteTCPActionPerformed
        // TODO add your handling code here:

        Thread TCPClient = new Thread() {

            @Override
            public void run() {

                int i = 0;
                try {

                    Socket clienteTCP = new Socket("localhost", 1234);
                    DataOutputStream enviar = new DataOutputStream(clienteTCP.getOutputStream());
                    for (; i < Integer.parseInt(TextFieldNumPack.getText()); i++) {

                        GregorianCalendar time = new GregorianCalendar();
                        String msg = i + ":" + time.get((Calendar.MINUTE)) + ":" + time.get((Calendar.SECOND)) + ":" + time.get((Calendar.MILLISECOND));
                        enviar.writeUTF(msg);
                    }
                } catch (IOException | NumberFormatException e) {

                    tcpLost++;
                }
            }
        };
        TCPClient.start();
    }//GEN-LAST:event_ButtonClienteTCPActionPerformed

    Thread TCPServer = null;

    private void ButtonStartServerTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartServerTCPActionPerformed
        // TODO add your handling code here:

        TCPServer = new Thread() {

            @Override
            public void run() {

                try {

                    ServerSocket socketTCP = new ServerSocket(1234);
                    Socket cliente = socketTCP.accept();
                    while (true) {

                        DataInputStream receber = new DataInputStream(cliente.getInputStream());
                        String msg = receber.readUTF();
                        String msgSplit[] = msg.split(":");
                        int soma = Integer.parseInt(msgSplit[0]) + 1;
                        TextAreaStatus.append(soma + ":     " + msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3] + "\n");
                        if (soma == 1) {

                            inicio = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                        } else if (soma == Integer.parseInt(TextFieldNumPack.getText())) {

                            fim = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                            String inicioSplit[] = inicio.split(":");
                            String fimSplit[] = fim.split(":");
                            int minutos = Integer.parseInt(fimSplit[0]) - Integer.parseInt(inicioSplit[0]);
                            int segundos = Integer.parseInt(fimSplit[1]) - Integer.parseInt(inicioSplit[1]);
                            int milesimos = Integer.parseInt(fimSplit[2]) - Integer.parseInt(inicioSplit[2]);
                            model.addRow(new String[]{"TCP", tcpLost + "", tcpLost + "", minutos + ":" + segundos + ":" + milesimos, TextFieldNumPack.getText()});
                        }
                    }
                } catch (IOException | NumberFormatException e) {
                }

            }
        };
        TCPServer.start();
        TextAreaStatus.append("TCP Server ON\n");
    }//GEN-LAST:event_ButtonStartServerTCPActionPerformed

    private void ButtonStopServerTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopServerTCPActionPerformed
        // TODO add your handling code here:

        TCPServer.stop();
        TextAreaStatus.append("TCP Server OFF\n");
    }//GEN-LAST:event_ButtonStopServerTCPActionPerformed

    private void ButtonCLienteUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCLienteUDPActionPerformed
        // TODO add your handling code here:

        Thread UDPClient = new Thread() {

            @Override
            public void run() {

                try {

                    DatagramSocket socketUDP = new DatagramSocket();
                    for (int i = 0; i < Integer.parseInt(TextFieldNumPack.getText()); i++) {

                        GregorianCalendar time = new GregorianCalendar();
                        String msg = i + ":" + time.get((Calendar.MINUTE)) + ":" + time.get((Calendar.SECOND)) + ":" + time.get((Calendar.MILLISECOND));
                        DatagramPacket enviar = new DatagramPacket(msg.getBytes(), msg.getBytes().length, InetAddress.getByName("localhost"), 1234);
                        socketUDP.send(enviar);
                    }
                } catch (NumberFormatException | UnknownHostException e) {
                } catch (IOException ex) {

                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        UDPClient.start();
    }//GEN-LAST:event_ButtonCLienteUDPActionPerformed

    Thread UDPServer = null;

    private void ButtonStartServerUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartServerUDPActionPerformed
        // TODO add your handling code here:

        UDPServer = new Thread() {

            @Override
            public void run() {

                try {

                    DatagramSocket socketUDP = new DatagramSocket(1234);
                    //socketUDP.setSoTimeout(2000);
                    while (true) {

                        DatagramPacket receber = new DatagramPacket(new byte[100], 100);
                        socketUDP.receive(receber);
                        byte recebido[] = receber.getData();
                        String msg = new String(recebido, 0, recebido.length);
                        String msgSplit[] = msg.split(":");
                        int soma = Integer.parseInt(msgSplit[0]) + 1;
                        TextAreaStatus.append(soma + ":     " + msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3] + "\n");
                        if (soma == 1) {

                            inicio = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                        } else if (soma == Integer.parseInt(TextFieldNumPack.getText())) {

                            fim = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                            String inicioSplit[] = inicio.split(":");
                            String fimSplit[] = fim.split(":");
                            int minutos = Integer.parseInt(fimSplit[0]) - Integer.parseInt(inicioSplit[0]);
                            int segundos = Integer.parseInt(fimSplit[1]) - Integer.parseInt(inicioSplit[1]);
                            inicioSplit[2] = inicioSplit[2].trim();
                            fimSplit[2] = fimSplit[2].trim();
                            int milesimos = Integer.parseInt(fimSplit[2]) - Integer.parseInt(inicioSplit[2]);
                            model.addRow(new String[]{"UDP", udpLost + "", udpLost + "", minutos + ":" + segundos + ":" + milesimos, TextFieldNumPack.getText()});
                        }
                    }
                } catch (IOException | NumberFormatException e) {
                }
            }
        };
        UDPServer.start();
        TextAreaStatus.append("UDP Server ON\n");
    }//GEN-LAST:event_ButtonStartServerUDPActionPerformed

    private void ButtonStopServerUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopServerUDPActionPerformed
        // TODO add your handling code here:

        UDPServer.stop();
        TextAreaStatus.append("UDP Server OFF\n");
    }//GEN-LAST:event_ButtonStopServerUDPActionPerformed

    private void ButtonClienteRMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClienteRMIActionPerformed
        // TODO add your handling code here:

        Thread RMICliet = new Thread() {

            @Override
            public void run() {

                int i = 0;
                try {

                    IRMI irmi = (IRMI) Naming.lookup("rmi://localhost/RMI");
                    for (; i < Integer.parseInt(TextFieldNumPack.getText()); i++) {

                        String msg = irmi.msg(i);
                        String msgSplit[] = msg.split(":");
                        int soma = Integer.parseInt(msgSplit[0]) + 1;
                        TextAreaStatus.append(soma + ":     " + msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3] + "\n");
                        if (soma == 1) {

                            inicio = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                        } else if (soma == Integer.parseInt(TextFieldNumPack.getText())) {

                            fim = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                            String inicioSplit[] = inicio.split(":");
                            String fimSplit[] = fim.split(":");
                            int minutos = Integer.parseInt(fimSplit[0]) - Integer.parseInt(inicioSplit[0]);
                            int segundos = Integer.parseInt(fimSplit[1]) - Integer.parseInt(inicioSplit[1]);
                            int milesimos = Integer.parseInt(fimSplit[2]) - Integer.parseInt(inicioSplit[2]);
                            model.addRow(new String[]{"RMI", rmiLost + "", rmiLost + "", minutos + ":" + segundos + ":" + milesimos, TextFieldNumPack.getText()});
                        }
                    }
                } catch (NotBoundException | MalformedURLException | RemoteException e) {

                    rmiLost++;
                }
            }
        };
        RMICliet.start();
    }//GEN-LAST:event_ButtonClienteRMIActionPerformed

    Thread RMIServer;

    private void ButtonStartServerRMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartServerRMIActionPerformed
        // TODO add your handling code here:

        RMIServer = new Thread() {

            @Override
            public void run() {

                try {

                    while (true) {

                        RMI rmi = new RMI();
                        LocateRegistry.createRegistry(Registry.REGISTRY_PORT);
                        Naming.bind("rmi://localhost/RMI", rmi);
                    }
                } catch (RemoteException | AlreadyBoundException | MalformedURLException e) {
                }
            }
        };
        RMIServer.start();
        TextAreaStatus.append("RMI Server ON\n");
    }//GEN-LAST:event_ButtonStartServerRMIActionPerformed

    private void ButtonStopServerRMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopServerRMIActionPerformed
        // TODO add your handling code here:

        RMIServer.stop();
        TextAreaStatus.append("RMI Server OFF\n");
    }//GEN-LAST:event_ButtonStopServerRMIActionPerformed

    private void ButtonClienteMulticastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClienteMulticastActionPerformed
        // TODO add your handling code here:

        Thread MulticastClient = new Thread() {

            @Override
            public void run() {

                try {

                    MulticastSocket multicastSocket = new MulticastSocket(3456);
                    for (int i = 0; i < Integer.parseInt(TextFieldNumPack.getText()); i++) {

                        GregorianCalendar time = new GregorianCalendar();
                        String msg = i + ":" + time.get((Calendar.MINUTE)) + ":" + time.get((Calendar.SECOND)) + ":" + time.get((Calendar.MILLISECOND));
                        DatagramPacket enviar = new DatagramPacket(msg.getBytes(), msg.getBytes().length, InetAddress.getByName("localhost"), 3456);
                        multicastSocket.send(enviar);
                    }
                } catch (NumberFormatException | IOException e) {
                }
            }
        };
        MulticastClient.start();
    }//GEN-LAST:event_ButtonClienteMulticastActionPerformed

    Thread MulticastServer;

    private void ButtonStartServerMulticastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartServerMulticastActionPerformed
        // TODO add your handling code here:
        MulticastServer = new Thread() {

            @Override
            public void run() {

                try {

                    MulticastSocket multicastSocket = new MulticastSocket(3456);
                    while (true) {

                        DatagramPacket receber = new DatagramPacket(new byte[100], 100);
                        multicastSocket.receive(receber);
                        String msg = new String(receber.getData(), 0, receber.getLength());
                        String msgSplit[] = msg.split(":");
                        int soma = Integer.parseInt(msgSplit[0]) + 1;
                        TextAreaStatus.append(soma + ":     " + msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3] + "\n");
                        if (soma == 1) {

                            inicio = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                        } else if (soma == Integer.parseInt(TextFieldNumPack.getText())) {

                            fim = msgSplit[1] + ":" + msgSplit[2] + ":" + msgSplit[3];
                            String inicioSplit[] = inicio.split(":");
                            String fimSplit[] = fim.split(":");
                            int minutos = Integer.parseInt(fimSplit[0]) - Integer.parseInt(inicioSplit[0]);
                            int segundos = Integer.parseInt(fimSplit[1]) - Integer.parseInt(inicioSplit[1]);
                            int milesimos = Integer.parseInt(fimSplit[2]) - Integer.parseInt(inicioSplit[2]);
                            model.addRow(new String[]{"Multicast", multicastLost + "", multicastLost + "", minutos + ":" + segundos + ":" + milesimos, TextFieldNumPack.getText()});
                        }
                    }
                } catch (IOException | NumberFormatException e) {
                }
            }
        };
        MulticastServer.start();
        TextAreaStatus.append("Multicast Server ON\n");
    }//GEN-LAST:event_ButtonStartServerMulticastActionPerformed

    private void ButtonStopServerMulticastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopServerMulticastActionPerformed
        // TODO add your handling code here:

        MulticastServer.stop();
        TextAreaStatus.append("Multicast Server OFF\n");
    }//GEN-LAST:event_ButtonStopServerMulticastActionPerformed

    private void ButtonClienteJGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClienteJGroupActionPerformed
        // TODO add your handling code here:

        Thread JGroupClient = new Thread() {

            @Override
            public void run() {

                try {

                    JGroup cliente = new JGroup();
                    for (int i = 0; i < Integer.parseInt(TextFieldNumPack.getText()); i++) {

                        cliente.client(i);
                    }
                } catch (Exception e) {
                }
            }
        };
        JGroupClient.start();
    }//GEN-LAST:event_ButtonClienteJGroupActionPerformed

    Thread JGroupServer;

    private void ButtonStartServerJGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartServerJGroupActionPerformed
        // TODO add your handling code here:

        JGroupServer = new Thread() {

            @Override
            public void run() {

                try {

                } catch (Exception e) {
                }
            }
        };
        JGroupServer.start();
        TextAreaStatus.append("JGroup Server ON\n");
    }//GEN-LAST:event_ButtonStartServerJGroupActionPerformed

    private void ButtonStopServerJGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopServerJGroupActionPerformed
        // TODO add your handling code here:

        JGroupServer.stop();
        TextAreaStatus.append("JGroup Server OFF\n");
    }//GEN-LAST:event_ButtonStopServerJGroupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCLienteUDP;
    private javax.swing.JButton ButtonClienteJGroup;
    private javax.swing.JButton ButtonClienteMulticast;
    private javax.swing.JButton ButtonClienteRMI;
    private javax.swing.JButton ButtonClienteTCP;
    private javax.swing.JButton ButtonStartServerJGroup;
    private javax.swing.JButton ButtonStartServerMulticast;
    private javax.swing.JButton ButtonStartServerRMI;
    private javax.swing.JButton ButtonStartServerTCP;
    private javax.swing.JButton ButtonStartServerUDP;
    private javax.swing.JButton ButtonStopServerJGroup;
    private javax.swing.JButton ButtonStopServerMulticast;
    private javax.swing.JButton ButtonStopServerRMI;
    private javax.swing.JButton ButtonStopServerTCP;
    private javax.swing.JButton ButtonStopServerUDP;
    private javax.swing.JTextArea TextAreaStatus;
    private javax.swing.JTextField TextFieldNumPack;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
